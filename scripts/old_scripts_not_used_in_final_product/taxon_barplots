#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#Goal is to have two barplots, one for EN and one for EP, with bars for each host taxon
#To do this I need something like this: 
## Values of each group
#bars1 = [12, 28, 1, 8, 22]
#bars2 = [28, 7, 16, 4, 10]
#bars3 = [25, 3, 23, 25, 17]
# where the integers correspond to different taxa (e.g., family, phyla)
#and there are different bars for each taxon/compartment combo
#see here for inspiration: https://www.python-graph-gallery.com/12-stacked-barplot-with-matplotlib

import pandas as pd
from collections import Counter 

#Bring in taxon proportions, these were wrangled in R after being generated by CNVRG
props = pd.read_csv("./processedData/ITSp_estimates_wrangled_for_post_modeling_analysis.csv")
#to handle ragged input note the specification of columns used here
taxa = pd.read_table("./processedData/smallmem97_ITS.sintax", names=range(4), sep='\t')
taxa.shape
meta = pd.read_csv("./processedData/ITSmetadat_wrangled_for_post_modeling_analysis.csv")
meta.shape

#Need to ensure the samples are in the correct order
#First a bit of wrangling to get a matchable sample name field
#We will merge X and taxa instead of reording one of them
#meta['compartment'] = meta['EN'].map({1: 'EN', 0: 'EP'})
#X['compartment'].value_counts()
#meta['sample'] = meta['plant.x'].str.cat(meta['compartment'], sep='_')

props_meta = pd.merge(meta, props, on='sample')
meta.shape
props.shape
props_meta.shape

#QC
#Counter(meta_props['treatments'])

#Extract just those taxa that are hypothesized to be fungi
df_taxa = taxa[3].str.split(",", expand = True)
boolarray = pd.Series(df_taxa.loc[:,0] == "d:Fungi").values
taxa = taxa.loc[boolarray,:]

# function to get unique values. snagged from geeksforgeeks
def unique(list1):
 
    # intilize a null list
    unique_list = []
     
    # traverse for all elements
    for x in list1:
        # check if exists in unique_list or not
        if x not in unique_list:
            unique_list.append(x)
    # return list
    return unique_list

orders = unique(df_taxa[3])

#Find all the taxa within an order
taxa_by_order = []
for i in orders:
    taxa_by_order.append(taxa.iloc[:,0][df_taxa.iloc[:,3] == i])

#Then do row sums for those taxa and add
#those new sums to a new dataframe that has samples as the first field
#then each summed taxon in subsequent fields. 

sums_taxa = []
for i in range(len(taxa_by_order)):
    #Selecting multiple columns in pandas sucks!!!!! 
    x = props_meta[props_meta.columns[props_meta.columns.isin(taxa_by_order[i])]]
    sums_taxa.append(x.sum(axis = 1))

df = pd.DataFrame(sums_taxa)
df.columns = props_meta['sample']
df = df.transpose()
df.columns = orders
df['sample'] = df.index.tolist()
df.index = range(0, len(df.index))

Counter(df['sample'] == props_meta['sample'])
props_meta_df = pd.concat([props_meta,df], axis = 1)
props_meta_df.shape

#arrange by taxon and compartment
#For some reason this is very slow. Too slow to use
#props_meta_df.sort_values('compartment')

#hosts = props_meta_df.loc[:,"Abies concolor":"Wyethia amplexicaulis"].columns.tolist()
#props_meta_df.sort_values(hosts, axis='index')#[["Abies concolor", "Wyethia amplexicaulis"]]

#Build a group.by object from the treatment feature
#sum by that feature
sums_treatment = props_meta_df.groupby('treatments').sum()
sums_treatment = sums_treatment.loc[:, sums_treatment.columns.str.startswith('o:', na=False)]
Counter(props_meta_df['treatments'])

sums_treatment["treatment"] = sums_treatment.index
sums_treatment.index = range(0, len(sums_treatment.index))

#remove the things that were 0, presumably due to rounding
sums_treatment = sums_treatment.loc[:, (sums_treatment.sum(axis = 0) != 0)]

#bring in metadata again
meta2 = pd.read_csv("./processedData/ITSmetadat_wrangled_for_post_modeling_analysis.csv")
meta2 = meta2[['region_site_plant','taxon_final']]
meta2 = meta2.drop_duplicates(subset = 'region_site_plant')

sums_treatment['treatment']
import re
region_site_plant = []
for i in sums_treatment['treatment']:
    region_site_plant.append(re.sub("(.*)E[NP].*", "\\1" , i))

meta2.shape
sums_treatment.shape

sums_treatment.insert(0,'region_site_plant',region_site_plant)

sums_treatment_meta2 = sums_treatment.merge(meta2, how = 'left', on = "region_site_plant")

sums_treatment_meta2.shape

#make compartment column
compartment = []
for i in sums_treatment_meta2['treatment']:
    compartment.append(re.sub(".*(E[NP]).*", "\\1" , i))
    
sums_treatment_meta2.insert(0,'compartment',compartment)

#plot
import matplotlib.pyplot as plt
# from matplotlib import rc

# # y-axis in bold
# rc('font', weight='bold')

EN = sums_treatment_meta2.loc[sums_treatment_meta2['compartment'] == 'EN',:]
EN = EN.sort_values('taxon_final')

EP = sums_treatment_meta2.loc[sums_treatment_meta2['compartment'] == 'EP',:]
EP = EP.sort_values('taxon_final')

barheights = EN.iloc[:,2:(len(EN.columns)-2)]

# The position of the bars on the x-axis
r = range(0,len(EN))
 
# Names of group and bar width
names = EN['taxon_final']
barWidth = 1
 
for i in range(0,(len(barheights.columns)-1)):
        plt.bar(r, 
                barheights.iloc[:,i].tolist(), 
                color='#7f6d5f', 
                edgecolor='white', 
                width=barWidth)

 
# Custom X axis
plt.xticks(r, names, fontweight='normal')
plt.xlabel("group")
 
# Show graphic
plt.show()

#EP

barheights = EP.iloc[:,2:(len(EP.columns)-2)]

 
# Names of group and bar width
names = EP['taxon_final']
barWidth = 1
 
for i in range(0,(len(barheights.columns)-1)):
        plt.bar(r, 
                barheights.iloc[:,i].tolist(), 
                color='#7f6d5f', 
                edgecolor='white', 
                width=barWidth)

 
# Custom X axis
plt.xticks(range(0,len(EP)), labels = names, rotation='vertical')
plt.xlabel("Host taxon")
plt.ylabel("Abundance (ratio with ISD)")

# Show graphic
#plt.show()
plt.savefig('./visuals/barplot.pdf')  
#THings that are needed. 
#1. remove the border 
#2. print only the unique values for the names centered under the group
#3. color code by order
#4. Do over for family
#5. Do for bacteria...maybe family, maybe phyla
#6 Examine the outlier taxon and make sure that it wasnt one of the plates that
#didnt get normalized right bc there was way more/less ISD
#https://opensource.com/article/20/4/plot-data-python